apply plugin: 'com.android.library'
apply plugin: 'maven'

android {
    def acceleratorCoreVersion = '1.0.24'
    compileSdkVersion 30
    buildToolsVersion "30.0.0"
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 1
        versionName "1.0.24"
        project.archivesBaseName = "opentok-accelerator-core"
        project.version = acceleratorCoreVersion
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            buildConfigField 'String', 'acceleratorCoreVersion', '\"'+acceleratorCoreVersion+'\"'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            buildConfigField 'String', 'acceleratorCoreVersion', '\"'+acceleratorCoreVersion+'\"'
        }
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        disable 'OldTargetApi'
    }
    libraryVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = outputFileName
            if (outputFile != null && outputFile.endsWith('.aar')) {
                def fileName = "${archivesBaseName}-${version}.aar"
                outputFileName = new File(outputFile, fileName)
            }
        }
        def javadoc = task("generateJavaDoc${variant.name.capitalize()}", type: Javadoc, dependsOn: "generate${variant.name.capitalize()}Sources") {
            source = 'src/main/java'
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
            destinationDir = file("build/outputs/docs/")
            title = 'OpenTok Accelerator Core Android'
            failOnError false
        }
        def zipBundle = task("zipBundle${variant.name.capitalize()}", type: Zip) {
            from ('build/outputs')
            include '**/aar/**'
            include '**/docs/**'
            exclude '**/lint-results-debug_files/**'
            destinationDirectory = file(".")
            archiveFileName = "${archivesBaseName}-${archiveVersion}.zip"
        }
        task("printVersion${variant.name.capitalize()}") {
          println project.version
        }
        zipBundle.dependsOn build
        zipBundle.dependsOn javadoc
    }
    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
    }
}

dependencies {
    repositories {
        maven { url 'https://maven.google.com' }
        maven { url 'http://tokbox.bintray.com/maven' }
    }
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.opentok.android:opentok-solutions-logging:1.0.3'
    implementation "com.opentok.android:opentok-android-sdk:2.18.0"
}

if (project.hasProperty("MAVEN_USERNAME") && project.hasProperty("MAVEN_PASSWORD")) {
    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: "https://api.bintray.com/maven/tokbox/maven/" + getArtifactId() + "/;publish=1") {
                    authentication(userName: "$MAVEN_USERNAME" ? "$MAVEN_USERNAME" : "", password: "$MAVEN_PASSWORD" ? "$MAVEN_PASSWORD" : "")
                }
                def (revision, buildTime) = getRevisionAndTime()
                pom.version = "${version}"
                pom.groupId = 'com.opentok.android'
                pom.artifactId = getArtifactId()
            }
        }
   }
}
def checkMaven = task("checkUploadArchivesDeps") {
    doFirst {
        if (!project.hasProperty("MAVEN_USERNAME")) {
            throw new GradleException("MAVEN_USERNAME Property not defined")
        }
        if (!project.hasProperty("MAVEN_PASSWORD")) {
            throw new GradleException("MAVEN_PASSWORD Property not defined")
        }
    }
}
uploadArchives.dependsOn checkMaven
def getRevisionAndTime() {
    def date = new Date()
    def hash = 'git rev-parse --verify HEAD'.execute().text.trim()
    TimeZone.setDefault(TimeZone.getTimeZone('PST'))
    def formattedDate = date.format('yyyyMMddHHmmss')
    return ["${hash}".toString(), formattedDate.toString()]
}

def isEnvVarNotEmptyOrNull(envVar) {
    def value = System.getenv(envVar)
    return value != null && !value.isEmpty()
}

def isPreview() {
    return isEnvVarNotEmptyOrNull("PREVIEW") && '1'.equals(System.getenv('PREVIEW'));
}

def getArtifactId() {
    return isPreview() ? "${PREVIEW_ARTIFACT_ID}" : "${ARTIFACT_ID}"
}
